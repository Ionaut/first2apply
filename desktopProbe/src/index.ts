import { app, BrowserWindow, nativeTheme } from "electron";
import path from "path";
import { ENV } from "./env";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const theme = nativeTheme.shouldUseDarkColors ? "dark" : "light";
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1024,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      additionalArguments: [theme],
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  bootstrap();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  // if (process.platform !== 'darwin') {
  app.quit();
  // }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
import fs from "fs";

import { createClient } from "@supabase/supabase-js";
import { DbSchema } from "../../supabase/functions/_shared/types";
import { getExceptionMessage } from "./lib/error";
import { F2aSupabaseApi } from "./server/supabaseApi";
import { JobScanner } from "./server/jobScanner";
import { initRendererIpcApi } from "./server/rendererIpcApi";

// globals
const supabase = createClient<DbSchema>(ENV.supabase.url, ENV.supabase.key);
const supabaseApi = new F2aSupabaseApi(supabase);
let jobScanner: JobScanner | undefined;

/**
 * Bootstrap probe service.
 */
async function bootstrap() {
  try {
    // init the job scanner
    jobScanner = new JobScanner(supabaseApi);

    // init the renderer IPC API
    initRendererIpcApi({ supabaseApi, jobScanner });

    const userDataPath = app.getPath("userData");
    const sessionPath = path.join(userDataPath, "session.json");

    // manual logout for testing
    // fs.unlinkSync(sessionPath);

    // load the session from disk if it exists
    if (fs.existsSync(sessionPath)) {
      const session = JSON.parse(fs.readFileSync(sessionPath, "utf-8"));
      console.log(`loading session from disk`);
      const { error } = await supabase.auth.setSession(session);
      if (error) throw error;
    } else {
      console.log(`no session found on disk`);
    }

    // save the session to disk when it changes
    supabase.auth.onAuthStateChange(async (event, session) => {
      try {
        // clear the session from disk if it's being removed
        if (event === "SIGNED_OUT") {
          console.log(`removing session from disk`);
          fs.unlinkSync(sessionPath);
          return;
        } else if (
          event === "SIGNED_IN" ||
          event === "TOKEN_REFRESHED" ||
          event === "PASSWORD_RECOVERY"
        ) {
          console.log(`saving new session to disk`);
          fs.writeFileSync(sessionPath, JSON.stringify(session));
        }
      } catch (error) {
        console.error(getExceptionMessage(error));
      }
    });

    // perform an initial scan
    await jobScanner.scanLinks();
  } catch (error) {
    console.error(getExceptionMessage(error));
  }

  // create the main window after everything is setup
  createWindow();
}
